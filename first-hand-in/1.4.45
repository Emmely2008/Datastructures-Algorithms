import random
import math
from math import log




def H(n):
    """Returns an approximate value of n-th harmonic number.

       http://en.wikipedia.org/wiki/Harmonic_number
    """
    # Euler-Mascheroni constant
    gamma = 0.57721566490153286060651209008240243104215933593992
    return gamma + log(n) + 0.5/n - 1./(12*n**2) + 1./(120*n**4)




# 1.4.45
def couponCollectorProblem(n):
	a = range(n)
	i = 0
	while( len(a) > 0 ):
	  chance = math.floor(random.random()*n);
	  i += 1
	  if chance in a:
		try:
		  a.remove(chance)
		except:
		  pass
	return i;    
      

def experiment(n,runs):
    i = 0
    total = 0
    while( i < runs ):
      total += couponCollectorProblem(n)
      i=i+1    
    return total/runs;


n=10
runs=1000.0	
exp1 = experiment(n,runs)
expected =  n*H(n)
print("With n="+str(n)+" runs="+str(runs)+" result="+str(exp1)+" expected result="+str(expected))
print("Error diff: " + str((expected-exp1)/exp1))
n=100
runs=100.0	
exp2 = experiment(n,runs) 
expected = n* H(n)
print("With n="+str(n)+" runs="+str(runs)+" result="+str(exp2)+" expected result="+str(expected))
print("Error diff: " + str((expected-exp2)/exp2))






# 1.4.45     Coupon collector problem. Generating random integers 
# as in the previous exercise, run experiments to validate the hypothesis 
# that the number of integers generated before all possible values are generated is ~N HN.
